<resources>
    <string name="app_name">Kotlin Tutor</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="sign_up">Sign Up</string>
    <string name="first_name">First Name</string>
    <string name="last_name">Last Name</string>
    <string name="email">Email</string>
    <string name="password">Password</string>
    <string name="confirm_password">Confirm Password</string>
    <string name="already_have_an_account">Already have an account?</string>
    <string name="sign_in">Sign in</string>
    <string name="email_address">Email Address</string>
    <string name="sign_in_text">Sign In</string>
    <string name="welcome_to">Welcome to</string>
    <string name="kotlintutor">KotlinTutor</string>
    <string name="a_simple_app_that_teaches_kotlin_fundamentals">A simple App that teaches Kotlin fundamentals.</string>
    <string name="don_t_have_an_account">Don\'t have an account?</string>
    <string name="topic">Topic</string>
    <string name="description">Description</string>
    <string name="list_of_topics">List of Topics</string>
    <string name="sign_out">Sign Out</string>
    <string name="create_account_with_kotlintutor">Create an Account With KotlinTutor</string>

    <string name="Detail1">
        </string>

    <string name="Detail2">
    </string>

    <string name="Detail3">
    </string>

    <string name="Detail4">
    </string>

    <string name="Detail5"></string>

    <string name="Detail6">
    </string>

    <string name="Detail7">
    </string>

    <!--    <string name="Detail8">Strings are used for storing text.-->
    <!--\n\n-->
    <!--A string contains a collection of characters surrounded by double quotes:-->
    <!--\n\n-->
    <!--Example-->
    <!--var greeting = "Hello"-->
    <!--Unlike Java, you do not have to specify that the variable should be a String. Kotlin is smart enough to understand that the greeting variable in the example above is a String because of the double quotes.-->
    <!--\n\n-->
    <!--However, just like with other data types, you can specify the type if you insist:-->
    <!--\n\n-->
    <!--Example-->
    <!--var greeting: String = "Hello"-->
    <!--Note: If you want to create a String without assigning the value (and assign the value later), you must specify the type while declaring the variable:-->
    <!--\n\n-->
    <!--Example-->
    <!--This works fine:-->
    <!--\n\n-->
    <!--var name: String-->
    <!--name = "John"-->
    <!--println(name)-->
    <!--Example-->
    <!--This will generate an error:-->
    <!--\n\n-->
    <!--var name-->
    <!--name = "John"-->
    <!--println(name)-->
    <!--Access a String-->
    <!--To access the characters (elements) of a string, you must refer to the index number inside square brackets.-->
    <!--\n\n-->
    <!--String indexes start with 0. In the example below, we access the first and third element in txt:-->
    <!--\n\n-->
    <!--Example-->
    <!--var txt = "Hello World"-->
    <!--println(txt[0]) // first element (H)-->
    <!--println(txt[2]) // third element (l)-->
    <!--[0] is the first element. [1] is the second element, [2] is the third element, etc.-->
    <!--\n\n-->
    <!--String Length-->
    <!--A String in Kotlin is an object, which contain properties and functions that can perform certain operations on strings, by writing a dot character (.) after the specific string variable. For example, the length of a string can be found with the length property:-->
    <!--\n\n-->
    <!--Example-->
    <!--var txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"-->
    <!--println("The length of the txt string is: " + txt.length)-->
    <!--String Functions-->
    <!--There are many string functions available, for example toUpperCase() and toLowerCase():-->
    <!--\n\n-->
    <!--Example-->
    <!--var txt = "Hello World"-->
    <!--println(txt.toUpperCase())   // Outputs "HELLO WORLD"-->
    <!--println(txt.toLowerCase())   // Outputs "hello world"-->
    <!--Comparing Strings-->
    <!--The compareTo(string) function compares two strings and returns 0 if both are equal:-->
    <!--\n\n-->
    <!--Example-->
    <!--var txt1 = "Hello World"-->
    <!--var txt2 = "Hello World"-->
    <!--println(txt1.compareTo(txt2))  // Outputs 0 (they are equal)-->
    <!--Finding a String in a String-->
    <!--The indexOf() function returns the index (the position) of the first occurrence of a specified text in a string (including whitespace):-->
    <!--\n\n-->
    <!--Example-->
    <!--var txt = "Please locate where 'locate' occurs!"-->
    <!--println(txt.indexOf("locate"))  // Outputs 7-->
    <!--Remember that Kotlin counts positions from zero.-->
    <!--0 is the first position in a string, 1 is the second, 2 is the third â€¦-->
    <!--\n\n-->
    <!--Quotes Inside a String-->
    <!--To use quotes inside a string, use single quotes ('):-->
    <!--\n\n-->
    <!--Example-->
    <!--var txt1 = "It's alright"-->
    <!--var txt2 = "That's great"-->
    <!--String Concatenation-->
    <!--The + operator can be used between strings to add them together to make a new string. This is called concatenation:-->
    <!--\n\n-->
    <!--Example-->
    <!--var firstName = "John"-->
    <!--var lastName = "Doe"-->
    <!--println(firstName + " " + lastName)-->
    <!--Note that we have added an empty text (" ") to create a space between firstName and lastName on print.-->
    <!--\n\n-->
    <!--You can also use the plus() function to concatenate two strings:-->
    <!--\n\n-->
    <!--Example-->
    <!--var firstName = "John "-->
    <!--var lastName = "Doe"-->
    <!--println(firstName.plus(lastName))-->
    <!--String Templates/Interpolation-->
    <!--Instead of concatenation, you can also use "string templates", which is an easy way to add variables and expressions inside a string.-->
    <!--\n\n-->
    <!--Just refer to the variable with the $ symbol:-->
    <!--\n\n-->
    <!--Example-->
    <!--var firstName = "John"-->
    <!--var lastName = "Doe"-->
    <!--println("My name is $firstName $lastName")-->
    <!--"String Templates" is a popular feature of Kotlin, as it reduces the amount of code. For example, you do not have to specify a whitespace between firstName and lastName, like we did in the concatenation example.</string>-->
    <!--        <string name="Detail9"></string>-->
    <!--        <string name="Detail10">-->
    <!--    </string>-->
    <!--        <string name="Detail11">-->
    <!--    </string>-->
    <!--        <string name="Detail12"></string>-->
    <!--        <string name="Detail13"></string>-->
    <!--        <string name="Detail14"></string>-->
    <!--        <string name="Detail15"></string>-->

    <string name="Lesson1">Kotlin Introduction</string>
    <string name="Details1">What is Kotlin?
Kotlin is a modern, trending programming language that was released in 2016 by <b><i>JetBrains</i></b>.\n

\nIt has become very popular since it is compatible with Java (one of the most popular programming languages out there), which means that Java code (and libraries) can be used in Kotlin programs.

\n\nKotlin is used for:

\n*Mobile applications (specially Android apps)
\n*Web development
\n*Server side applications
\n*Data science
\n*And much, much more!
    \n\t\n
        Why Use Kotlin?\n
\n*Kotlin is fully compatible with Java
\n*Kotlin works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)
\n*Kotlin is concise and safe
\nKotlin is easy to learn, especially if you already know Java
\n*Kotlin is free to use
\n*Big community/support</string>
    <string name="Lesson2">Kotlin Variables</string>

    <string name="Details2">
Variables are containers for storing data values.

To create a variable, use var or val, and assign a value to it with the equal sign (=):</string>

    <string name="Lesson3">Kotlin Comments</string>
    <string name="Details3">
Comments can be used to explain Kotlin code, and to make it more readable. It can also be used to prevent execution when testing alternative code.</string>

    <string name="Lesson4">Kotlin Data Types</string>
    <string name="Details4">
Very often, in programming, you will need a data type that can only have one of two values, like:
        \t\n\t
\nYES / NO
\nON / OFF
\nTRUE / FALSE
\nFor this, Kotlin has a Boolean data type, which can take the values true or false.</string>

    <string name="Lesson5">Kotlin Operators</string>
    <string name="Details5">
Operators are used to perform operations on variables and values.

The value is called an operand, while the operation (to be performed between the two operands) is defined by an operator:</string>
    <string name="Lesson6">Kotlin Arrays</string>
    <string name="Details6">Kotlin Arrays
Arrays are used to store multiple values in a single variable, instead of creating separate variables for each value.

To create an array, use the arrayOf() function, and place the values in a comma-separated list inside it:</string>

    <string name="Lesson7">Kotlin Ranges</string>
    <string name="Details7">Kotlin Ranges
With the for loop, you can also create ranges of values with "..":</string>

    <string name="Lesson8">Kotlin Strings</string>
    <string name="Details8">
Strings are used for storing text.

A string contains a collection of characters surrounded by double quotes:</string>

    <string name="Lesson9">Kotlin Booleans</string>
    <string name="Details9">
Very often, in programming, you will need a data type that can only have one of two values, like:
        \t\n\t
\nYES / NO
\nON / OFF
\nTRUE / FALSE
\nFor this, Kotlin has a Boolean data type, which can take the values true or false.</string>

    <string name="Lesson10">Kotlin Functions</string>
    <string name="Details10">
The println() function is used to output values/print text:\n</string>

    <string name="Lesson11">Kotlin Classes and Objects</string>
    <string name="Details11">Kotlin Classes/Objects
Everything in Kotlin is associated with classes and objects, along with its properties and functions. For example: in real life, a car is an object. The car has properties, such as brand, weight and color, and functions, such as drive and brake.

A Class is like an object constructor, or a "blueprint" for creating objects.</string>

    <string name="Lesson12">Kotlin Syntax</string>
    <string name="Details12">
In the previous chapter, we created a Kotlin file called Main.kt, and we used the following code to print "Hello World" to the screen:\n</string>

    <string name="Lesson13">Kotlin Constructors</string>
    <string name="Details13">Kotlin Constructor
In the previous chapter, we created an object of a class, and specified the properties inside the class, like this:</string>
    <string name="Lesson14">Kotlin Loops</string>
    <string name="Details14">Loops
Loops can execute a block of code as long as a specified condition is reached.

Loops are handy because they save time, reduce errors, and they make code more readable.</string>

    <string name="Lesson15">Kotlin OOP</string>
    <string name="Details15">Kotlin - What is OOP?
OOP stands for Object-Oriented Programming.

Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.

Object-oriented programming has several advantages over procedural programming:

OOP is faster and easier to execute
OOP provides a clear structure for the programs
OOP helps to keep the Kotlin code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
OOP makes it possible to create full reusable applications with less code and shorter development time
Tip: The "Don't Repeat Yourself" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.</string>

    <string name="images">images</string>
    <string name="on_board_text">Kotlin is a modern, trending programming language.
        \n\nKotlin is easy to learn especially if you already know java (it is 100% compatible with Java)
        \n\nKotlin is used to develop android Apps, server side apps and much more.</string>
    <string name="start_learning_kotlin_now"><![CDATA[Start Learning Kotlin now >>]]></string>
    <string name="learn_kotlin">Learn Kotlin</string>

</resources>