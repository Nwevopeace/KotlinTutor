<resources>
    <string name="app_name">Kotlin Tutor</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="sign_up">Sign Up</string>
    <string name="first_name">First Name</string>
    <string name="last_name">Last Name</string>
    <string name="email">Email</string>
    <string name="password">Password</string>
    <string name="confirm_password">Confirm Password</string>
    <string name="already_have_an_account">Already have an account?</string>
    <string name="sign_in">Sign in</string>
    <string name="email_address">Email Address</string>
    <string name="sign_in_text">Sign In</string>
    <string name="welcome_to">Welcome to</string>
    <string name="kotlintutor">KotlinTutor</string>
    <string name="a_simple_app_that_teaches_kotlin_fundamentals">A simple App that teaches Kotlin fundamentals.</string>
    <string name="don_t_have_an_account">Don\'t have an account?</string>
    <string name="topic">Topic</string>
    <string name="description">Description</string>
    <string name="list_of_topics">List of Topics</string>
    <string name="sign_out">Sign Out</string>
    <string name="create_account_with_kotlintutor">Create an Account With KotlinTutor</string>

        <string name="Detail1">
        </string>

        <string name="Detail2">
    </string>

        <string name="Detail3">
    </string>

        <string name="Detail4">
    </string>

        <string name="Detail5"></string>

        <string name="Detail6">
    </string>

        <string name="Detail7">
    </string>

    <!--    <string name="Detail8">Strings are used for storing text.-->
    <!--\n\n-->
    <!--A string contains a collection of characters surrounded by double quotes:-->
    <!--\n\n-->
    <!--Example-->
    <!--var greeting = "Hello"-->
    <!--Unlike Java, you do not have to specify that the variable should be a String. Kotlin is smart enough to understand that the greeting variable in the example above is a String because of the double quotes.-->
    <!--\n\n-->
    <!--However, just like with other data types, you can specify the type if you insist:-->
    <!--\n\n-->
    <!--Example-->
    <!--var greeting: String = "Hello"-->
    <!--Note: If you want to create a String without assigning the value (and assign the value later), you must specify the type while declaring the variable:-->
    <!--\n\n-->
    <!--Example-->
    <!--This works fine:-->
    <!--\n\n-->
    <!--var name: String-->
    <!--name = "John"-->
    <!--println(name)-->
    <!--Example-->
    <!--This will generate an error:-->
    <!--\n\n-->
    <!--var name-->
    <!--name = "John"-->
    <!--println(name)-->
    <!--Access a String-->
    <!--To access the characters (elements) of a string, you must refer to the index number inside square brackets.-->
    <!--\n\n-->
    <!--String indexes start with 0. In the example below, we access the first and third element in txt:-->
    <!--\n\n-->
    <!--Example-->
    <!--var txt = "Hello World"-->
    <!--println(txt[0]) // first element (H)-->
    <!--println(txt[2]) // third element (l)-->
    <!--[0] is the first element. [1] is the second element, [2] is the third element, etc.-->
    <!--\n\n-->
    <!--String Length-->
    <!--A String in Kotlin is an object, which contain properties and functions that can perform certain operations on strings, by writing a dot character (.) after the specific string variable. For example, the length of a string can be found with the length property:-->
    <!--\n\n-->
    <!--Example-->
    <!--var txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"-->
    <!--println("The length of the txt string is: " + txt.length)-->
    <!--String Functions-->
    <!--There are many string functions available, for example toUpperCase() and toLowerCase():-->
    <!--\n\n-->
    <!--Example-->
    <!--var txt = "Hello World"-->
    <!--println(txt.toUpperCase())   // Outputs "HELLO WORLD"-->
    <!--println(txt.toLowerCase())   // Outputs "hello world"-->
    <!--Comparing Strings-->
    <!--The compareTo(string) function compares two strings and returns 0 if both are equal:-->
    <!--\n\n-->
    <!--Example-->
    <!--var txt1 = "Hello World"-->
    <!--var txt2 = "Hello World"-->
    <!--println(txt1.compareTo(txt2))  // Outputs 0 (they are equal)-->
    <!--Finding a String in a String-->
    <!--The indexOf() function returns the index (the position) of the first occurrence of a specified text in a string (including whitespace):-->
    <!--\n\n-->
    <!--Example-->
    <!--var txt = "Please locate where 'locate' occurs!"-->
    <!--println(txt.indexOf("locate"))  // Outputs 7-->
    <!--Remember that Kotlin counts positions from zero.-->
    <!--0 is the first position in a string, 1 is the second, 2 is the third â€¦-->
    <!--\n\n-->
    <!--Quotes Inside a String-->
    <!--To use quotes inside a string, use single quotes ('):-->
    <!--\n\n-->
    <!--Example-->
    <!--var txt1 = "It's alright"-->
    <!--var txt2 = "That's great"-->
    <!--String Concatenation-->
    <!--The + operator can be used between strings to add them together to make a new string. This is called concatenation:-->
    <!--\n\n-->
    <!--Example-->
    <!--var firstName = "John"-->
    <!--var lastName = "Doe"-->
    <!--println(firstName + " " + lastName)-->
    <!--Note that we have added an empty text (" ") to create a space between firstName and lastName on print.-->
    <!--\n\n-->
    <!--You can also use the plus() function to concatenate two strings:-->
    <!--\n\n-->
    <!--Example-->
    <!--var firstName = "John "-->
    <!--var lastName = "Doe"-->
    <!--println(firstName.plus(lastName))-->
    <!--String Templates/Interpolation-->
    <!--Instead of concatenation, you can also use "string templates", which is an easy way to add variables and expressions inside a string.-->
    <!--\n\n-->
    <!--Just refer to the variable with the $ symbol:-->
    <!--\n\n-->
    <!--Example-->
    <!--var firstName = "John"-->
    <!--var lastName = "Doe"-->
    <!--println("My name is $firstName $lastName")-->
    <!--"String Templates" is a popular feature of Kotlin, as it reduces the amount of code. For example, you do not have to specify a whitespace between firstName and lastName, like we did in the concatenation example.</string>-->
<!--        <string name="Detail9"></string>-->
<!--        <string name="Detail10">-->
<!--    </string>-->
<!--        <string name="Detail11">-->
<!--    </string>-->
<!--        <string name="Detail12"></string>-->
<!--        <string name="Detail13"></string>-->
<!--        <string name="Detail14"></string>-->
<!--        <string name="Detail15"></string>-->

    <string name="Lesson1">Kotlin Introduction</string>
    <string name="Lesson2">Kotlin Variables</string>
    <string name="Lesson3">Kotlin Comments</string>
    <string name="Lesson4">Kotlin Data Types</string>
    <string name="Lesson5">Kotlin Operators</string>
    <string name="Lesson6">Kotlin Arrays</string>
    <string name="Lesson7">Kotlin Ranges</string>
    <string name="Lesson8">Kotlin Strings</string>
    <string name="Lesson9">Kotlin Booleans</string>
    <string name="Lesson10">Kotlin Functions</string>
    <string name="Lesson11">Kotlin Classes and Objects</string>
    <string name="Lesson12">Kotlin Class Functions</string>
    <string name="Lesson13">Kotlin Constructors</string>
    <string name="Lesson14">Kotlin Inheritance</string>
    <string name="Lesson15">Kotlin OOP</string>
    <string name="images">images</string>
    <string name="on_board_text">Kotlin is a modern, trending programming language.
        \n\nKotlin is easy to learn especially if you already know java (it is 100% compatible with Java)
        \n\nKotlin is used to develop android Apps, server side apps and much more.</string>
    <string name="start_learning_kotlin_now"><![CDATA[Start Learning Kotlin now >>]]></string>
    <string name="learn_kotlin">Learn Kotlin</string>

</resources>