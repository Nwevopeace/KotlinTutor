package com.peacecodes.kotlintutor.data

import com.peacecodes.kotlintutor.model.KotlinFundamentals

object DataSource {
    fun loadKotlinFundamentals(): List<KotlinFundamentals>{
        return listOf(
            KotlinFundamentals("Kotlin Introduction", "<h2>What is Kotlin?</h2>\nKotlin is an open-source statically typed programming language that targets the JVM, Android, JavaScript and Native. Itâ€™s developed by JetBrains. The project started in 2010 and was open source from very early on. The first official 1.0 release was in February 2016.<br><br><h3>What is the current version of Kotlin?</h3>\nThe currently released version is 1.5.31, published on September 20, 2021. <br><br><h3>Overview</h3>\nKotlin can be used for any kind of development, be it server-side, client-side web and Android. With Kotlin/Native currently in the works, support for other platforms such as embedded systems, macOS and iOS is coming. People are using Kotlin for mobile and server-side applications, client-side with JavaScript or JavaFX, and data science, just to name a few possibilities. <br><br><h3>What IDEs support Kotlin?</h3>\nKotlin is supported by all major Java IDEs including IntelliJ IDEA, Android Studio, and Eclipse. In addition, a command line compiler is available and provides straightforward support for compiling and running applications. <br><br><h3>What build tools support Kotlin?</h3>\n On the JVM side, the main build tools include Gradle, Maven, Ant, and Kobalt. There are also some build tools available that target client-side JavaScript. <br><br><h3>What does Kotlin compile down to?</h3>\nWhen targeting the JVM, Kotlin produces Java compatible bytecode. When targeting JavaScript, Kotlin transpiles to ES5.1 and generates code which is compatible with module systems including AMD and CommonJS. When targeting native, Kotlin will produce platform-specific code (via LLVM)."),
            KotlinFundamentals("Kotlin Variables", "<h2>Kotlin Variable</h2>\nVariable refers to a memory location. It is used to store data. The data of variable can be changed and reused depending on condition or on information passed to the program. <br><br><h3>Variable declaration</h3>\nKotlin uses two different keywords to declare variables: val and var. <br>- Use val for a variable whose value never changes. You can't reassign a value to a variable that was declared using val (Immutable variable). <br>- Use var for a variable whose value can change (Mutable variable).",),
            KotlinFundamentals("Kotlin Comments", "Comments can be used to explain Kotlin code, and to make it more readable. It can also be used to prevent execution when testing alternative code. Single-line Comments Single-line comments starts with two forward slashes (//). Any text between // and the end of the line is ignored by Kotlin (will not be executed). This example uses a single-line comment before a line of code: Example // This is a comment println(\"Hello World\")"),
            KotlinFundamentals("Kotlin Data Type", "<h2>Kotlin Variable</h2>\nVariable refers to a memory location. It is used to store data. The data of variable can be changed and reused depending on condition or on information passed to the program. <br><br><h3>Variable declaration</h3>\nKotlin uses two different keywords to declare variables: val and var. <br>- Use val for a variable whose value never changes. You can't reassign a value to a variable that was declared using val (Immutable variable). <br>- Use var for a variable whose value can change (Mutable variable).",),
            KotlinFundamentals("Kotlin Array", "<h2>Kotlin Variable</h2>\nVariable refers to a memory location. It is used to store data. The data of variable can be changed and reused depending on condition or on information passed to the program. <br><br><h3>Variable declaration</h3>\nKotlin uses two different keywords to declare variables: val and var. <br>- Use val for a variable whose value never changes. You can't reassign a value to a variable that was declared using val (Immutable variable). <br>- Use var for a variable whose value can change (Mutable variable).",),
            KotlinFundamentals("Kotlin Ranges", "<h2>Kotlin Variable</h2>\nVariable refers to a memory location. It is used to store data. The data of variable can be changed and reused depending on condition or on information passed to the program. <br><br><h3>Variable declaration</h3>\nKotlin uses two different keywords to declare variables: val and var. <br>- Use val for a variable whose value never changes. You can't reassign a value to a variable that was declared using val (Immutable variable). <br>- Use var for a variable whose value can change (Mutable variable).",),
            KotlinFundamentals("Kotlin Strings", "<h2>Kotlin String</h2> \nAn array of characters is called a string. Kotlin strings are mostly similar to Java strings but has some new added functionalities. Kotlin strings are also immutable in nature means we can not change elements and length of the String. <br><br>To declare a string in Kotlin, we need to use double quotes, single quotes are not allowed to define Strings.",),
            KotlinFundamentals("Kotlin Boolean", "<h2>Kotlin Variable</h2>\nVariable refers to a memory location. It is used to store data. The data of variable can be changed and reused depending on condition or on information passed to the program. <br><br><h3>Variable declaration</h3>\nKotlin uses two different keywords to declare variables: val and var. <br>- Use val for a variable whose value never changes. You can't reassign a value to a variable that was declared using val (Immutable variable). <br>- Use var for a variable whose value can change (Mutable variable).",),
            KotlinFundamentals("Kotlin Function", " \"<h3>Kotlin functions</h3>\\nA function is a unit of code that performs a special task. In programming, function is used to break the code into smaller modules which makes the program more manageable. <br>In Kotlin, there are two types of function: <br>- Standard library function <br>- User defined function. <br><br><h2>Kotlin standard library function</h2>\\nIn Kotlin, there are different number of built-in functions already defined in standard library and available for use. We can call them by passing arguments according to requirement. Some standard library function includes: sqrt(), print(), rem(), toInt(), readline(), compareTo(), etc. <br><br><h2>Kotlin user-defined function</h2>\\nA function which is defined by the user is called user-defined function. As we know, to divide a large program in small modules we need to define function. Each defined function has its own properties like name of function, return type of a function, number of parameters passed to the function etc.\",\n" + "            ),"),
            KotlinFundamentals("Kotlin Classes and Objects", "<h2>Kotlin Variable</h2>\nVariable refers to a memory location. It is used to store data. The data of variable can be changed and reused depending on condition or on information passed to the program. <br><br><h3>Variable declaration</h3>\nKotlin uses two different keywords to declare variables: val and var. <br>- Use val for a variable whose value never changes. You can't reassign a value to a variable that was declared using val (Immutable variable). <br>- Use var for a variable whose value can change (Mutable variable).",),
            KotlinFundamentals("Kotlin Class Functions", "<h2>Kotlin Variable</h2>\nVariable refers to a memory location. It is used to store data. The data of variable can be changed and reused depending on condition or on information passed to the program. <br><br><h3>Variable declaration</h3>\nKotlin uses two different keywords to declare variables: val and var. <br>- Use val for a variable whose value never changes. You can't reassign a value to a variable that was declared using val (Immutable variable). <br>- Use var for a variable whose value can change (Mutable variable).",),
            KotlinFundamentals("Kotlin Constructors", "<h2>Kotlin Variable</h2>\nVariable refers to a memory location. It is used to store data. The data of variable can be changed and reused depending on condition or on information passed to the program. <br><br><h3>Variable declaration</h3>\nKotlin uses two different keywords to declare variables: val and var. <br>- Use val for a variable whose value never changes. You can't reassign a value to a variable that was declared using val (Immutable variable). <br>- Use var for a variable whose value can change (Mutable variable).",),
            KotlinFundamentals("Kotlin Inheritance", "In Kotlin, it is possible to inherit class properties and functions from one class to another. We group the \"inheritance concept\" into two categories: subclass (child) - the class that inherits from another class superclass (parent) - the class being inherited from In the example below, MyChildClass (subclass) inherits the properties from the MyParentClass class (superclass): Example // Superclass open class MyParentClass { val x = 5 } // Subclass class MyChildClass: MyParentClass() { fun myFunction() { println(x) // x is now inherited from the superclass }  }  // Create an object of MyChildClass and call myFunction fun main() { val myObj = MyChildClass() myObj.myFunction() } Example Explained  Use the open keyword in front of the superclass/parent, to make this the class other classes should inherit properties and functions from. To inherit from a class, specify the name of the subclass, followed by a colon :, and then the name of the superclass. Why And When To Use \"Inheritance\"? - It is useful for code reusability: reuse properties and functions of an existing class when you create a new class."),
            KotlinFundamentals("Kotlin OOP", "OOP stands for Object-Oriented Programming. Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods. Object-oriented programming has several advantages over procedural programming: OOP is faster and easier to execute OOP provides a clear structure for the programs OOP helps to keep the Kotlin code DRY \"Don\\'t Repeat Yourself\", and makes the code easier to maintain, modify and debug OOP makes it possible to create full reusable applications with less code and shorter development time Tip: The \"Don\\'t Repeat Yourself\" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it. Kotlin - What are Classes and Objects? Classes and objects are the two main aspects of object-oriented programming. Look at the following illustration to see the difference between class and objects: classFruit objects Apple Banana Mango Another example: class Car objects Volvo Audi Toyota So, a class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the variables and methods from the class. You will learn much more about classes and objects in the next chapter.)"))
    }
}